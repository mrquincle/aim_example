##########################################################################################
#               _/\/\/\/\/\____/\/\/\/\__/\/\/\/\/\____/\/\_______                       #
#               _/\/\____/\/\____/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\/\/\/\______/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\__/\/\______/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\____/\/\__/\/\/\/\__/\/\/\/\/\____/\/\/\/\/\_                       #
#               __________________________________________________                       #
##########################################################################################
# Part of RIDL, the RUR IDL builder which generates modules for middlewares, including 
# lightweight (robotic) middleware like YARP. 
# This makefile is part of a cmake build system. The code falls under the Lesser General 
# Public License (LGPL GNU v3).

# Author:	 Anne C. van Rossum (Almende B.V.)
# Date: 	 Nov 7, 2011
#
# ASCII Art generated by: http://www.network-science.de/ascii/ with font "ticks".
#
# Copyright Â© 2011 Anne van Rossum <anne@almende.com>
##########################################################################################

IF(WIN32)
  cmake_minimum_required(VERSION 2.6)
ELSE(WIN32)
  cmake_minimum_required(VERSION 2.4)
ENDIF(WIN32)

# The directory with all the FindXXX modules
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/aim/cmake/")

MESSAGE("Search for FindX files in ${CMAKE_SOURCE_DIR}/aim/cmake")

# The macro below forces the build directory to be different from source directory:
INCLUDE( MacroEnsureOutOfSourceBuild )
MACRO_ENSURE_OUT_OF_SOURCE_BUILD ( "Requires an out of source build." ) 

# Build options
OPTION(BUILD_YARP      "Build module with YARP" OFF)
OPTION(BUILD_ROS       "Build module with ROS" OFF)
OPTION(BUILD_STANDARD  "Default build option" ON)

IF (NOT (BUILD_YARP OR BUILD_ROS))
  INCLUDE(default.cmake)
  INCLUDE(local.cmake OPTIONAL)
ENDIF ()

IF (BUILD_YARP OR BUILD_ROS)
  SET(BUILD_STANDARD OFF)
ENDIF ()

# Write the (backend) configuration
CONFIGURE_FILE( ${CMAKE_SOURCE_DIR}/aim/config.h.cmake ${CMAKE_SOURCE_DIR}/aim/inc/Config.h )

# Find all cmake packages
IF (BUILD_YARP)
  MESSAGE("YARP build, useful for YARP middleware")
  FIND_PACKAGE(YARP REQUIRED)
  INCLUDE_DIRECTORIES(${YARP_INCLUDE_DIRS} PARENT_SCOPE)
  SET(LIBS ${LIBS} ${YARP_LIBRARIES} PARENT_SCOPE)
ENDIF (BUILD_YARP)

IF (BUILD_ROS)
  MESSAGE("ROS build, useful for ROS middleware")
  include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)
  rosbuild_init()
ENDIF (BUILD_ROS)

# Source directory
SET(SOURCE_DIR "src")
SET(INCLUDE_DIR "inc")

# Warning for user when standard build
IF (BUILD_STANDARD)
  MESSAGE("[!] Standard build, not usable in middleware yet")
ENDIF (BUILD_STANDARD)

# Search for functional source code
FILE(GLOB aim_source ${SOURCE_DIR}/*.cpp ${SOURCE_DIR}/*.cc ${SOURCE_DIR}/*.c)
FILE(GLOB aim_header ${INCLUDE_DIR}/*.h)

SET(AIM_FILES ${aim_header} PARENT_SCOPE)

